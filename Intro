#include <stdio.h>
#include <iostream>
#include "opencv2/core.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"

using namespace cv;

int main()
{
    namedWindow("Main Color Detection");

    Mat image = imread("GreenApple.bmp");
    if (image.empty())
    {
        std::cerr << "Error: Could not open or find the image." << std::endl;
        return -1;
    }

    Mat imageHSV;
    cvtColor(image, imageHSV, COLOR_BGR2HSV);

    // Define HSV range for blue color
    Scalar lowerBlue = Scalar(100, 50, 50);
    Scalar upperBlue = Scalar(140, 255, 255);

    // Define HSV range for green color
    Scalar lowerGreen = Scalar(40, 50, 50);
    Scalar upperGreen = Scalar(80, 255, 255);

    // Define HSV range for red color
    Scalar lowerRed1 = Scalar(0, 50, 50);
    Scalar upperRed1 = Scalar(10, 255, 255);
    Scalar lowerRed2 = Scalar(170, 50, 50);
    Scalar upperRed2 = Scalar(179, 255, 255);

    Mat maskBlue, maskGreen, maskRed1, maskRed2;
    inRange(imageHSV, lowerBlue, upperBlue, maskBlue);
    inRange(imageHSV, lowerGreen, upperGreen, maskGreen);
    inRange(imageHSV, lowerRed1, upperRed1, maskRed1);
    inRange(imageHSV, lowerRed2, upperRed2, maskRed2);

    int bluePixels = countNonZero(maskBlue);
    int greenPixels = countNonZero(maskGreen);
    int redPixels1 = countNonZero(maskRed1);
    int redPixels2 = countNonZero(maskRed2);
    int redPixels = redPixels1 + redPixels2;

    std::string mainColor;
    if (bluePixels >= greenPixels && bluePixels >= redPixels)
    {
        mainColor = "Blue";
        bitwise_and(image, image, image, maskBlue);
    }
    else if (greenPixels >= bluePixels && greenPixels >= redPixels)
    {
        mainColor = "Green";
        bitwise_and(image, image, image, maskGreen);
    }
    else
    {
        mainColor = "Red";
        bitwise_or(maskRed1, maskRed2, maskRed1);
        bitwise_and(image, image, image, maskRed1);
    }

    std::cout << "Main color of the image: " << mainColor << std::endl;

    imshow("Main Color Detection", image);

    waitKey(0);
    destroyAllWindows();

    return 0;
}
